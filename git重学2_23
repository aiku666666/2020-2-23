查看git 版本
git --version
git安装后配置作者的email和姓名
    git config --global user.name 'xx' //global全局配置
    git config --global user.email 'xx'
    git config --list  //查看git作者的信息  简写： git config -l  //简写都不用 -- 只用 -
    git //会显示git的命令和介绍
git 创建仓库
    按j或者k是cmd的命令行向下
    ctrl+l //清屏cmd的
    ls -la //列出所有子目录
    //创建仓库的3种方式
        git init //初始化仓库
        git init 文件名 //创建一个文件的同时初始化改仓库
        git clone github的项目链接 //拷贝github的项目
        git clone github的项目链接 重命名的名字 //拷贝github的项目并且重命名文件夹名字
git 基本用法
    git status  //查看仓库状态
    git add .//.表示所有文件都上传【只是暂存区】
    git add *.html //上传某一类的文件(上传所有的html文件)
    git commit -m '描述' //提交版本【见到commit才是有后悔药】
    git log //查看版本记录，（回车去看记录，按q退回来）
    git log -p //查看版本记录和版本修改的地方
    git log --oneline //只显示版本id和标题
    git log --oneline --all //只显示版本id和标题所有的记录
    git checkout xxx //穿越到指定的历史节点【最好7位数，从git log 后去拿commit后的唯一id吗多于7位数】
    git reset --hard xx//回退到历史版本
    git checkout -   //回到最后的版本就是最后修改后的版本
git 的三种状态（git status 查看）
    modified //已修改
    staged  //已暂存
    committed //已提交
git tag标签
    command1 &&command2 && ... //先执行命令command1在执行命令command2 例子git add . && git commit -m 'xx'
    git tag -a 标签名 -m "备注"   //附注标签说明这个版本比较重要  -a的意思是annotated 有注释的【只是在版本上打标签没有提交的效果】
    git tag -a 标签名 -m "备注" xxx  //在指定的历史节点打标签，并不会穿越回去。【最好7位数，从git log 后去拿commit后的唯一id吗多于7位数】
    git show 标签名称  //查看某个标签的详细信息
    git tag //列出所有标签
    git checkout 标签名    //回溯至标签所在的提交
git 分支branch
    git branch 分支名字 //创建分支
    git checkout 分支名  //切换到分支上了
    git log --all --graph //图示全部历史记录
git 合并分支
    git checkout -b 分支名 //创建并切换至分支
    git merge 分支名  //合并分支【合并后代码可能会有冲突，所以认为修改冲突后提交】
git 远程仓库
    git remote add 远程名称  远程地址  //添加远程仓库
    git remote   //列出所有远程仓库
    git remote -v   //列出所有远程仓库详细信息
    git push -u 远程名称 分支名  //上传代码【分支名：默认是master】
    git clone github的项目链接 //拷贝github的项目
    拷贝的项目要在上传代码的话
    //远程仓库里 master是默认分支名称。origin是默认的远程仓库名称
    //它默认你克隆的项目地址为远程仓库了
git 如何多人远程合作
    git pull //获取远程更新等价于git fetch && git merge

