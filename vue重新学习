“vue实例” 是具体的例子
1.双括号解析语句和angular差不多都可以解析一部分语句，但并不是所有语句都可以解析
2.在vue里面所有的数据都放在data里面，但是在模块化里面data是个函数返回对象，而在正常情况下data对应就是对象，如果在页面调用数据的时候，但是数据没在data定义
的就会报错
指令：（vue里面自定义的属性叫做指令）
    v-model //双向绑定
    v-show  //显示/隐藏 永远存在，就是给不给显示罢了元素还是在dom里面
    v-if   //显示/隐藏 直接从dom中删除，不会给你隐藏
    v-for //循环v-for in
    v-bind //绑定数据和元素属性的 v-bind:自定义属性名（html属性） 后面加data数据就好，做到动态添加。这个属性和angular的ng-自定义属性（html属性）简写方式v-bind:等价于:
    v-on:事件  //绑定事件 例如v-on:click 点击事件.在angular里面则是ng-事件。
        一个dom绑定多个事件 v-on="{mouseenter:onEnter,mouseleave:onOut}" //鼠标移入移开事件
        禁止默认事件时候，方法在页面上的事件本身的参数是$event这个和angular一样
        vue里面也为我们封装了对应的事件例如：v-on:submit.prevent='方法' //禁止默认事件   v-on:submit.stop='方法' //停止冒泡事件
        还有vue里面键盘事件的语义化 例子 v-on:keyup.enter='方法' //点击enter的时候执行方法.如果要其他键盘字符就直接将enter换成字母就好了
        v-on:可以简写成@
    v-model具体用法（input,select,textarea）
        v-model.lazy // 惰性更新（只有input失焦的时候才会触发）就是个change事件
        v-model.trim  //把用户输入的值前后的空格键都去除
        v-model.number //用户只能输入数字
    v-model在其他元素及类型上的用法
        input 的radio情况下，只用v-model就好不需要用传统的name来强制只能选择一个。其他基本都一样,数据是一个字符串就好
            <input type='radio' v-model='sex' value='男'> <input type='radio' v-model='sex' value='女'>
        input 的checkbox情况下，数据改成数组型。
            <input type='checkbox' v-model='arr' value='男'> <input type='checkbox' v-model='arr' value='女'>
        select 在多选的情况下加一个属性multiple 然后数据类型改成数组就可以了
    控制流指令（v-if,v-else,v-else-if）
        <span v-if="role=='admin' || role == 'superAdmin'">管理员你好</span>
        <span v-else-if="role=='hr'">工作人员你好</span>
        <span v-else>没有权限</span>
计算属性(computed)计算属性都要一个return返回值。通过其他数据算出一个新的数据
    有点：获取到的数据已经缓存下来了，在其他数据没有改变的情况下他调取的是缓存数据。
    例子: new Vue({
        data:{
            a1:'1',
            a2:'2'
        },
        computed:{
            sum:function(){
                return this.a1+this.a2 //this指代的是这个实例
            },
            average:function(){
                return this.sum/3   //求平均分
            }
        }
    })
    //调用 直接 {{sum}}
组件 - 全局及局部组件(component)
    用法全局组件用法：Vue.component('组件名',{})
    局部组件用法： new Vue({
        components:{
           '组件名':{}
        }
    })
组件 - 配置组件
    Vue.component('like',{
        template:'<button @click="datas">{{data1}}</button>' //模板
        data:function(){ //数据。由于每次调用一次都会新实例化一个新的对象就要有新的数据
            return {
                data1:'20'
            }
        },
        methods:{
            datas:function(){
                this.data1++;
            }
        }
    })
    也可以写在页面上
    <template id='likes'><button @click="datas">{{data1}}</button></template>
    Vue.component('like',{
        template:'#likes' //模板
        data:function(){ //数据。由于每次调用一次都会新实例化一个新的对象就要有新的数据
            return {
                data1:'20'
            }
        },
        methods:{
            datas:function(){
                this.data1++;
            }
        }
    })
组件 - 父子通信
