“vue实例” 是具体的例子
1.双括号解析语句和angular差不多都可以解析一部分语句，但并不是所有语句都可以解析
2.在vue里面所有的数据都放在data里面，但是在模块化里面data是个函数返回对象，而在正常情况下data对应就是对象，如果在页面调用数据的时候，但是数据没在data定义
的就会报错
指令：（vue里面自定义的属性叫做指令）
    v-model //双向绑定
    v-show  //显示/隐藏 永远存在，就是给不给显示罢了元素还是在dom里面
    v-if   //显示/隐藏 直接从dom中删除，不会给你隐藏
    v-for //循环v-for in
    v-bind //绑定数据和元素属性的 v-bind:自定义属性名（html属性） 后面加data数据就好，做到动态添加。这个属性和angular的ng-自定义属性（html属性）简写方式v-bind:等价于:
    v-on:事件  //绑定事件 例如v-on:click 点击事件.在angular里面则是ng-事件。
        一个dom绑定多个事件 v-on="{mouseenter:onEnter,mouseleave:onOut}" //鼠标移入移开事件
        禁止默认事件时候，方法在页面上的事件本身的参数是$event这个和angular一样
        vue里面也为我们封装了对应的事件例如：v-on:submit.prevent='方法' //禁止默认事件   v-on:submit.stop='方法' //停止冒泡事件
        还有vue里面键盘事件的语义化 例子 v-on:keyup.enter='方法' //点击enter的时候执行方法.如果要其他键盘字符就直接将enter换成字母就好了
        v-on:可以简写成@
    v-model具体用法（input,select,textarea）
        v-model.lazy // 惰性更新（只有input失焦的时候才会触发）就是个change事件
        v-model.trim  //把用户输入的值前后的空格键都去除
        v-model.number //用户只能输入数字
    v-model在其他元素及类型上的用法
        input 的radio情况下，只用v-model就好不需要用传统的name来强制只能选择一个。其他基本都一样,数据是一个字符串就好
            <input type='radio' v-model='sex' value='男'> <input type='radio' v-model='sex' value='女'>
        input 的checkbox情况下，数据改成数组型。
            <input type='checkbox' v-model='arr' value='男'> <input type='checkbox' v-model='arr' value='女'>
        select 在多选的情况下加一个属性multiple 然后数据类型改成数组就可以了
    控制流指令（v-if,v-else,v-else-if）
        <span v-if="role=='admin' || role == 'superAdmin'">管理员你好</span>
        <span v-else-if="role=='hr'">工作人员你好</span>
        <span v-else>没有权限</span>
计算属性(computed)计算属性都要一个return返回值。通过其他数据算出一个新的数据
    有点：获取到的数据已经缓存下来了，在其他数据没有改变的情况下他调取的是缓存数据。
    例子: new Vue({
        data:{
            a1:'1',
            a2:'2'
        },
        computed:{
            sum:function(){
                return this.a1+this.a2 //this指代的是这个实例
            },
            average:function(){
                return this.sum/3   //求平均分
            }
        }
    })
    //调用 直接 {{sum}}
组件 - 全局及局部组件(component)
    用法全局组件用法：Vue.component('组件名',{})
    局部组件用法： new Vue({
        components:{
           '组件名':{}
        }
    })
组件 - 配置组件
    Vue.component('like',{
        template:'<button @click="datas">{{data1}}</button>' //模板
        data:function(){ //数据。由于每次调用一次都会新实例化一个新的对象就要有新的数据
            return {
                data1:'20'
            }
        },
        methods:{
            datas:function(){
                this.data1++;
            }
        }
    })
    也可以写在页面上
    <template id='likes'><button @click="datas">{{data1}}</button></template>
    Vue.component('like',{
        template:'#likes' //模板
        data:function(){ //数据。由于每次调用一次都会新实例化一个新的对象就要有新的数据
            return {
                data1:'20'
            }
        },
        methods:{
            datas:function(){
                this.data1++;
            }
        }
    })
组件 - 父子通信
    组建传参通过自定义指令传参，是从外部往内部传值，接收时候是通过props来接收的。[props效果和data用法差不多，就接收方式不太一样]
    这个是个父组建和子组建沟通的桥梁

组件 - 子父通信
    在子组建的方法里面触发一个发射器 this.$emit('方法名',{参数})
    在子组建名上接收这个发射器的方法名字 @方法名='父方法'//父方法接收的参数是子发射器里面的参数

组件 - 任意及平行组件间通信
    任意组建间的通讯要有一个中间调度器.然后用中间调度器的$emit('方法名',参数)。
    其他组建获取时候也用中间调度器的$on('对应的方法名",function(){})这样就可以了
    例子：
    var Even=new Vue({})
     Even.$emit('getHuahua',参数)
     Even.$on('getHuahua',function (data) {})

过滤器
    filter是不会修改原始数据，给人感觉就是解决最后到达用户界面的最后一步。优化用户体验。如果函数内十分的复杂就考虑要不要使用计算属性了
    全局写法
        Vue.filter('xiugai',function(data){
            return data+'元'
        })
     组件内写法
     new Vue({
         el:'#app',
         filters:{
             xiugai:function(data){
                 return data+'元'
             }

         }
     })
自定义指令 - 基础配置
    v-指令名（灵活和省力）
    自定义指令 Vue.directive('指令名',function(el,binding){// el参数表示的这个指令所在的元素,binding表示的这个指令的值或者是其它基本信息
        binding.value //表示自定义指令的值
    })
自定义指令 - 配置传参及修饰符
    v-指令名.属性.属性  //就是通过修饰符
    v-指令名:参数.属性.属性 //传参和修饰符

    自定义指令 Vue.directive('指令名',function(el,binding){// el参数表示的这个指令所在的元素,binding表示的这个指令的值或者是其它基本信息
        binding.value //表示自定义指令的值
        binding.modifiers //获取到一个对象，对应的修饰符的结果返回是布尔值。可以用for in来便利对象，其中对应的key就是修饰符的名字
        binding.arg //获取到参数
    })

混合 mixins（重复功能混合的储存器）
   用法 mixins;[封好的对象]
   注意：组件的方法或者数据会自动覆盖mixins里面的数据

插槽 slots【占位符】
    用法：
    <slot name='指定名称'>默认数据</slot>  //插槽模板可以放默认数据也可以不放
    <div slot='指定名称'>动态数据</div> //这边写的数据会覆盖默认数据，如果不写或没有就使用默认数据

Vue.js生态之vue-router
    路由作用：指导一个网页层级以及定位资源用的
    单页面应用是不刷新页面，不丢失状态，不丢失数据

安装和基本配置
    实例
        html
         <router-link to="/">首页</router-link>  //router-link 链接跳转， to对应的是跳转的路径
         <router-view></router-view> //路由切换模块
       js
            var routes=[
                {
                    path:'/',
                    component:{   //需要展示的组件
                        template:`<div> 首页</div>`
                    }
                }
            ]
            var router=new VueRouter({  //VueRouter 是vue-router开放的接口
                routes:routes
            })
            new Vue({
                el:'#app',
                router:router
            })

传参及获取传参
    传参有2中方式
    1. <router-link to="/user/参数">我叫王花花</router-link>
       获取参数$route.params.参数
       {
           path:'/user/:name',
           component:{
               template:`<div>我叫：{{$route.params.name}}</div>`
           }
        }
    2. <router-link to="/users?name=参数">我叫王花花</router-link>
        获取参数$route.query.参数
        {
            path:'/users',
            component:{
                template:`<div>我叫：{{$route.query.name}}</div>`
            }
         }

子路由
    实例：在镶嵌路由的时候对应的模板下也需要有router-view,而对应的子路由的路径也放在父路径下面，放在children里面。children和routes一样都是数组
    var routes=[
        {
                path:'/user/:name',
                component:{ /*<router-link :to="'/user/'+$route.params.name+'/more'">更多</router-link>*/  //路径拼接在一起，$route.params.name是参数
                    template:`<div>
                                我叫：{{$route.params.name}}
                                <router-link to="more" append>更多</router-link> //路径不需要拼接直接写子路径就好，在添加append意思是在当前路径下加子路径
                                <router-view></router-view>
                            </div>`
                },
                children:[
                    {
                        path:'more', //子路由路径不需要加斜杠
                        component:{
                            template:`
                                <div>
                                    用户信息{{$route.params.name}}
                                    <span>二u哦额u哦亲哦大家了解到了单独，当年开始的开始的开始对接电视上看到数据库是的接口的接口打开手机打开</span>
                                </div>
                            `
                        }
                    }
                ]
         }
    ]

手动访问和传参
    手动访问：this.router.push('路径')
    手动访问和传参：this.router.push({name:'user',params:{name:'王花花'}}) //name表示路由名称，params是参数对象

命名视图
    用途：<router-view name='content'></router-view>
    实例
    index.html
        <router-link to="/">首页</router-link>
        <router-link to="/user">用户管理</router-link>
        <router-link to="/root">系统管理</router-link>
        <div>
            <router-view name="silder"></router-view>
            <router-view name="content"></router-view>
        </div>
     index.js
        {
            path:'/user',
            components:{  //多个组件时用components，单个时候用component
                silder:{
                    template:`<ul> <li>用户管理1</li> <li>用户管理2</li>      </ul> `
                },
                content:{
                    template:`<div>用户管理测试 </div>`
                }
            }
        },
        {
            path:'/root',
            components:{  //多个组件
                silder:{
                    template:`<ul> <li>系统管理1</li> <li>系统管理2</li>      </ul> `
                },
                content:{
                    template:`<div>系统管理测试 </div>`
                }
            }
        }

导航钩子【路由的生命周期或者中间层】
    用法：
    1.router.beforeEach(function(to,from,next){ //beforeEach路由访问之前执行。form从哪里来，to到哪里去，next是一个function，告诉我们要怎么做。这个就是路由拦截
        next() //正常执行，在next里面放链接就是页面跳转。放false就是都无法访问
    })
    2. router.afterEach(function(to,from){ }) //afterEach路由访问之后执行，没有next因为已经访问完了，to和from都是一个对象

元数据及路由匹配（路由配置里面的meta就是元数据，也是自定义配置）
    用法：
        {
            path:'/a',
            component:{
                template:`<div>A</div>`
            },
            meta:{
                flags:true //自定义配置
            }
        }
     路由拦截的时候的to是个对象，他底下又个matched是包含了路由和子路由的一切数据。主要用了meta的便利性
