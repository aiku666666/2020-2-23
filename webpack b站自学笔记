//安装
    npm i webpack-cli webpack -g
1.安装命令
//基本使用
    webpack 输入文件.js 输出文件.js
//特性
    0cjs //在webpack4里面如果输入文件在src下默认的输出文件dist不用在去配置。打包命令 【webpack --mode development】
//简单例子（webpack4.0 => code）
    //基本指令
    webpack 输出文件 -o 打包后重新命名文件  //生产环境打包
    webpack --mode development 输出文件 -o 打包后重新命名文件  //开发环境打包
    当打包的文件在src里面的时候，
    执行命令 webpack --mode development 开发模式时候自动生成dist文件和打包文件main
    执行命令 webpack 生产模式时候自动生成dist文件和打包文件main（生产模式下debug会被节省掉）
2.配置文件
//webpack 配置文件（webpack4.0 => simgle）
    //webpack.config.js(出口入口配置)
        // 例子
            //单个文件打包的
        const path=require('path');
        mmodule.exports={
             entry:'./index.js', //entry 是个对象，可以经行多个文件打包
             output:{
                 path:path.resolve(__dirname ,'dist'),
                 filename:'output.bundle.js'
             }
         }
            //多个文件打包
        module.exports={
            entry:{
               about:'./about',
               home:'./home'
            },
            output:{
                path:path.resolve(__dirname,'dist'),
                filename:"[name].bundle.js"
            },
            mode:'development'  //开发模式：'production'和'development'这样打包的时候直接就可以写命令webpack后面就不用加模式了
        }
https://webpack.js.org/loaders/【webpack的loader查找】
3.加载器url-loader(可以对图片进行base64处理)[loader是webpack去预处理原文件的]（webpack4.0 => simgle2）
    3.1.npm install url-loader --save-dev
    3.2.url-loder的调用
        module.exports = {
          module: {
            rules: [
              {
                test: /\.(png|jpg|gif)$/i, //规则匹配png、jpg、gif的规则
                use: [
                  {
                    loader: 'url-loader',  //使用插件
                    options: {
                      limit: 8192,   //限制如果是8k以下的执行转变base64.否则就是原来的静态资源
                    },
                  },
                ],
              },
            ],
          },
        };
     注意：在图片比限制的文件大的时候图片不会被url-loader转化成base64位的，所以他还需要安装file-loader来打包静态图片资源
     file-loader指令：npm i file-loader --save-dev
4.加载器babel-loader(可以将es6,es7转换成es5，便于浏览器识别)（webpack4.0 => simgle3）
    4.1 npm install -D babel-loader @babel/core @babel/preset-env webpack // @babel/core核心代码 @babel/preset-env规则
    4.2 babel-loader的调用
    module: {
            rules: [
                {
                    test: /\.m?js$/, //匹配文件如果是jsx文件就要改成 /\.(m?js|jsx)$/
                    exclude: /(node_modules|bower_components)/,
                    use: {
                        loader: 'babel-loader',
                        options: {
                            presets: ['@babel/preset-env']
                        }
                    }
                }
            ]
        }
5.加载器sass-loader(可以将sass 编译成css)
    5.1 npm install sass-loader node-sass webpack --save-dev
    5.2 sass-loader调用
    module: {
        rules: [
          {
            test: /\.s[ac]ss$/i,  //匹配scss文件
            use: [ //最好也安装下style-loader css-loader插件
              // Creates `style` nodes from JS strings
              'style-loader',
              // Translates CSS into CommonJS
              'css-loader',
              // Compiles Sass to CSS
              'sass-loader',
            ],
          },
        ],
      }
6.插件miniCssExtract【目的是打包的时候分离出js中的css，单独打包成一个css文件】
    6.1 npm install --save-dev mini-css-extract-plugin
    6.2 miniCssExtract 使用
   const MiniCssExtractPlugin = require('mini-css-extract-plugin'); //调用插件
   module.exports = {
     plugins: [
       new MiniCssExtractPlugin({
         // Options similar to the same options in webpackOptions.output
         // both options are optional
         filename: '[name].css',  //[name]是入口文件名称
         chunkFilename: '[id].css',
       }),
     ],
     module: {
       rules: [
         {
           test: /\.css$/,
           use: [
              process.env.NODE_ENV !== 'production'      //判断是否是生产环境不是的话用插件style-loader,否则是css-loader sass-loader
                         ? 'style-loader'
                         : MiniCssExtractPlugin.loader,
                       'css-loader',
                       'sass-loader',
              //也可以写成默认
                    MiniCssExtractPlugin.loader,
                    'css-loader',
                    'sass-loader',
           ],
         },
       ],
     },
   };
7.插件DefinePlugin[全局变量]
    module.exports = {
         plugins: [
           new MiniCssExtractPlugin({
             // Options similar to the same options in webpackOptions.output
             // both options are optional
             filename: '[name].css',  //[name]是入口文件名称
             chunkFilename: '[id].css',
           }),
           new webpack.DefinePlugin({
             'SERVICE_URL': JSON.stringify('https://dev.example.com')  // SERVICE_URL这个是个全局参数，不需要调用DefinePlugin这个插件但是要引用下webpack，webpack自带的
           });
         ]
         }
9.插件Html(HtmlWebpackPlugin)[帮助我们去生成html文件]
    9.1 npm install --save-dev html-webpack-plugin
    9.2 HtmlWebpackPlugin插件使用（他会自动生成html 文件，同时会配置好js和css）
    var HtmlWebpackPlugin = require('html-webpack-plugin');
    var path = require('path');
    module.exports = {
      entry: 'index.js',
      output: {
        path: path.resolve(__dirname, './dist'),
        filename: 'index_bundle.js'
      },
      plugins: [new HtmlWebpackPlugin()]
    };
    9.3 定制一个自己的html
    {
      entry: 'index.js',
      output: {
        path: __dirname + '/dist',
        filename: 'index_bundle.js'
      },
      plugins: [
        new HtmlWebpackPlugin({
          title: 'My App', //title名称
          filename: 'assets/admin.html',  //生成html的文件名和文件位置（输出文件）
          template: 'src/assets/test.html' //输入文件（可以在文件里面定义title div和js）
        })
      ]
    }
    //文件里面的title要放入<%= htmlWebpackPlugin.options.title %> 这样才能将MY App调用进去
10.热替换[DevServer服务]
     10.1 npm install --save-dev webpack-dev-server(启用服务并且可以热替换)
     10.2 webpack-dev-server的使用
     var path=require('path');
      module.exports = {
        devServer:{
            contentBase:path.join(__dirname,'dist'),  //在哪个文件启动我们服务
            compress:true,  //是否需要压缩
            port:9000, //端口号
            hot:true //热替换功能，在webpack4版本里面就不用配置了。默认是热替换额
        }
      }
      10.3启动 webpack-dev-server,在package.json里面添加start命令（由于直接在终端的输入webapck-dev-server，全局没安装这个插件所以不支持这个指令）
       "scripts": {
          "test": "echo \"Error: no test specified\" && exit 1",
          'start':'webpack-dev-server'
        },
11.webpack4 版本升级（3升级到4注意事项）[simgle4](升级思路，首先升级webpack，然后根据报错来解决问题)
    11.1 webpack安装vue项目后先检查下项目是否可以运行(vue-cli是基于webpack3.0的版本) //npm start(开发时候打包启用)
    11.2 查看package.json里面webpack的版本号确定是否升级
    11.3 首先升级webpack为4版本 // npm i webpack@^4 -D  (devDependencies表示D， dependencies表示S)
    11.4 然后升级webpack-dev-server,因为它和webpack是配套使用的 // npm i webpack-dev-server@latest -D
    11.5 缺少webpack-cli.所以安装下 //npm i webpack-cli@latest -D
    11.6 html-webpack-plugin出现问题 //npm i html-webpack-plugin@latest -D
    11.7 eslint-loader出问题 //npm i eslint-loader@latest -D
    11.8 vue-loader有问题 //
    11.9 识别不了css，到package.json里面升级css版本 //npm i css-loader@latest -D   npm i postcss-loader@latest -D
    11.10 发现在vue-loader里面需要配置才行
        // webpack.base.config.js
        const VueLoaderPlugin = require('vue-loader/lib/plugin')
        module.exports = {
          // ...
          plugins: [
            new VueLoaderPlugin()
          ]
        }
    11.11 webpack 最高版本，造成 混用import和module.exports会报错解决方法
    注释文件中 .babelrc中的plugins的transform-runtime插件
    11.12 在打包的时候会报错webpack.optimize.CommonsChunkPlugin已经在webpack4已经移除，需要用config.optimization.splitChunks //npm run build
    去官网把对应使用方法copy下来放到webpack.prod.conf.js里面，同时去掉webpack.prod.conf.js的CommonsChunkPlugin方法
    注意：webpack.base.conf.js是webpack的基础配置。webpack.dev.conf.js是开发配置。webpack.prod.conf.js是生产配置
    11.13 复制到webpack.prod.conf.js的代码
          optimization: {
            splitChunks: {
              chunks: 'async',
              minSize: 30000,
             // minRemainingSize: 0, //在webpack4.0的时候不适用
              maxSize: 0,
              minChunks: 1,
              maxAsyncRequests: 6,
              maxInitialRequests: 4,
              automaticNameDelimiter: '~',
              automaticNameMaxLength: 30,
              cacheGroups: {
                defaultVendors: {
                  test: /[\\/]node_modules[\\/]/,
                  priority: -10
                },
                default: {
                  minChunks: 2,
                  priority: -20,
                  reuseExistingChunk: true
                }
              }
            }
          }
    11.14 extract-text-webpack-plugin插件不合适 //npm i extract-text-webpack-plugin@latest -D(暂时还是不支持)
    注意： npm i extract-text-webpack-plugin@next -D  //next是还没对外正式发布的，但是他已经有的了。latest则是对外发布了的最新版本
    11.15 contenthash css的哈希值在webpack里面不支持，自带的hash就可以了将contenthash改成hash就可以
    11.16 html-webpack-plugin版本不合适报错 //npm i html-webpack-plugin@latest -D
    11.17 mode 模式未确定，生产模式的话就增加 mode:'production',
    11.18 报错 Unhandled rejection Error: "dependency" is not a valid chunk sort mode
    就将webpack.prod.conf.js里面的chunksSortMode对象注释或者改成auto也可以。这样升级就结束了
