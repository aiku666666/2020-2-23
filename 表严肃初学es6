es是标准，js是实现(bysEs6 es6实例集合)
1.let 命令
    1.1 var和let的区别
    let有区域限制，即{}。在括号里面用let定义的变量在外面是无法获取的。（块级作用域）
    var则针对的局部变量和全局变量，局部变量在全局中是无法获取的，全局的在局部是可以获取的，主要是function
    var 有个变量提升，在执行js之前先把变量提到最前面先让变量等于underfined;
    区别：let不能在js中使用，是es6的语法，需要在js中使用就必须使用严格模式：'use strict';
          直接使用没有声明的变量，let直接报错，var的提示未定义：undefined;
          var 重复声明，第二次声明会覆盖第一次声明的值;
          let重复声明会报错(在同一级别时候);
2. const 命令  //constant 定义常量（块级作用域）
    2.1 注意：const定义的是常量，是不可以改变常量值的，要不然会报错
         一旦申明const就要给他值。要不然报错，即申明和赋值要同时进行
    2.2 用法： const可以指定为对象，对象内容是可以修改的，因为它这边固定的是对象的指针而不是对象的值
3.变量的解构赋值（数组）【顺序很重要】
    3.1变量解构赋值方法
    es5 var a=1,b=2,c=3;
    es6+ var [a,b,c]=[1,2,3] //变量一一对应 。后面就可以直接使用变量了
         var [a,,c]=[1,2,3] //获取a=1.c=3,b报错。就是按照结构变量和值是一一对应
         var [a,...c]=[1,2,3] //获取a=1,c=[2,3],用省略号表示将后面的值都赋给c
         var [a,b,c='default',d='default']=[1,2,3] //赋值默认值,当没有值的时候赋予默认值
4 变量的解构赋值（对象）【名称很重要】
    4.1变量的结构赋值方法
    es5 var obj={a:1,b:2}; a=obj.a; b=obj.b;
    es6 let obj={a:1,b:2}; let{a,b}=obj; //他是看重名称一一对应的
        对应 let obj={a:1,b:2}; let{a:a,b:b}=obj; //之前的是简写，实际是这个写法。意思是先找到a命名为a，b命名为b
        let obj={a:1,b:2}; let{a:A,b}=obj; //类似于重命名，原本是a对应的obj.a，现在改成了A对应了obj.a.而对应的原本的a就对应不了obj.a了。a类似键名了
        let obj={a:1,b:2}; let{a:A,b}=obj; let a=5 //会报错的，应为对象解构赋值和普通的赋值其实是一样的，同一级别下的let不能重复定义赋值
        let obj={a:1,b:2;let a=0; {a,b}=obj //会报错,大括号赋值的时候不能出现在最前面。应为那样会被js'认为是代码块。解决的方法是加括号({a,b}=obj)这样告诉解析器这个是个语句
        let {a=1;b=2}={a:2}  //a=2,b=2.默认值的方法和数组解构的一样的
